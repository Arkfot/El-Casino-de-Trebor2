async function obtenerCodigoUsuario() {
  let userCode = localStorage.getItem("user_code");

  // üí° Paso 1: limpiar restos de sistemas antiguos
  const oldUuid = localStorage.getItem("user_id");
  const oldNum = localStorage.getItem("user_id_num");

  if (!userCode && (oldUuid || oldNum)) {
    console.log("üßπ Limpiando ID antiguo...");

    // Borrar claves antiguas
    localStorage.removeItem("user_id");
    localStorage.removeItem("user_id_num");

    // Forzar creaci√≥n de nuevo c√≥digo
    userCode = null;
  }

  // ‚úÖ Paso 2: validar c√≥digo actual en la base de datos
  if (userCode) {
    try {
      const res = await fetch(`generar_usuario_nuevo.php?check_code=${userCode}`);
      const validacion = await res.text();

      if (validacion !== "VALIDO") {
        console.warn("‚ö†Ô∏è C√≥digo inv√°lido. Generando nuevo...");
        localStorage.removeItem("user_code");
        userCode = null;
      }
    } catch (err) {
      console.error("üö´ Error al validar el c√≥digo:", err);
    }
  }

  // üÜï Paso 3: generar nuevo c√≥digo si no existe o es inv√°lido
  if (!userCode) {
    try {
      const res = await fetch("generar_usuario_nuevo.php");
      if (!res.ok) throw new Error("Error al generar c√≥digo");

      userCode = await res.text();
      localStorage.setItem("user_code", userCode);
    } catch (err) {
      console.error("üö® No se pudo generar un nuevo c√≥digo:", err);
      userCode = "ERROR";
    }
  }

  // Mostrar el c√≥digo final
  document.getElementById("user_code").textContent = userCode;
}

obtenerCodigoUsuario();
